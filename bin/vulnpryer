#!/usr/bin/env python

import argparse
from datetime import date, timedelta
from dateutil.parser import parse
# from time import ctime
import logging
import sys

# for scheduling
from crontab import CronTab

# VulnDB components
from vulnpryer.vulndb import query_vulndb
from vulnpryer.shiploader import load_mongo, get_extract
from vulnpryer.forklift import get_trl, modify_trl, post_trl

# set default dates
to_date = date.today()
from_date = to_date + timedelta(days=-1)


def mkdate(datestr):
    """Coerce arguments into date type"""
    if not isinstance(datestr, date):
        return parse(datestr)
    else:
        return datestr



def schedule():
    """"Schedule vulnpryer in crontab"""
    user_cron = CronTab(user=True)
    user_cron.remove_all(comment='VulnPryer load')
    job = user_cron.new(command='vulnpryer', comment='VulnPryer load')
    job.hour.on(3)
    job.day.every(1)
    user_cron.write()
    logger.info("VulnPryer added to user crontab")


def unschedule():
    """"Unschedule vulnpryer"""
    user_cron = CronTab(user=True)
    user_cron.remove_all(comment='VulnPryer load')
    user_cron.write()
    logger.info("VulnPryer removed from user crontab")


def process():
    """execute daily processing"""
    start_string = args.startdate
    start_string = start_string.strftime("%Y-%m-%d")
    end_string = args.enddate
    end_string = end_string.strftime("%Y-%m-%d")

    logger.info("Range requested {} - {}".format(start_string, end_string))
    print("Range requested {} - {}".format(start_string, end_string))
    query_vulndb(args.startdate, args.enddate)

    logger.info("Loading data into Mongo.")
    print("Loading data into Mongo.")
    load_mongo('data_*.json')

    logger.info("Generating extract.")
    print("Generating extract.")
    get_extract('/tmp/vulndb_export.csv')

    logger.info("Fetching RedSeal TRL.")
    print("Fetching RedSeal TRL.")
    get_trl('/tmp/trl.gz')

    logger.info("Generating modified TRL.")
    print("Generating modified TRL.")
    new_trl_path = modify_trl('/tmp/trl.gz')

    logger.info("Posting modified TRL to S3.")
    print("Posting modified TRL to S3.")
    post_trl(new_trl_path)

    logger.info("VulnPryer run complete.")
    print("VulnPryer run complete.")


parser = argparse.ArgumentParser()
parser.add_argument("command", default="daily", nargs="?",
                    help="Command to execute (schedule|unschedule|daily).")
parser.add_argument("-e", "--enddate", type=mkdate, default=to_date,
                    help="Start date.")
parser.add_argument("-s", "--startdate", type=mkdate, default=from_date,
                    help="End date.")
parser.add_argument("-l", "--loglevel", default="info", help="Log level.")
args = parser.parse_args()

# set logging level
numeric_level = getattr(logging, args.loglevel.upper(), None)
if not isinstance(numeric_level, int):
    raise ValueError('Invalid log level; %s' % args.loglevel)
logging.basicConfig(stream=sys.stdout,
                    level=numeric_level,
                    format='%(asctime)s %(name)s %(levelname)s %(message)s')

logger = logging.getLogger('vulnpryer')

if args.command == "schedule":
    schedule()
elif args.command == "unschedule":
    unschedule()
elif args.command == "daily":
    process()
else:
    print("Invalid command option: {}".format(args.command))
    raise
